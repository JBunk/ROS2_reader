#ifndef FIB_ACTION_CLIENT_HPP
#define FIB_ACTION_CLIENT_HPP

#include "rclcpp/rclcpp.hpp"
#include "rclcpp_action/rclcpp_action.hpp"

// the location of our custom action.
// the hpp generated by ROS as a underscore (_) before every capital, expect the first:
// for example: /my/path/MyAction.action become /my/path/my_action.action
#include "custom_interfaces/action/fibonacci.hpp"

class FibActionClient : public rclcpp::Node
{
public:
  // 'using' allows us to use a shorter word for these long types:
  using FibAction = custom_interfaces::action::Fibonacci;
  using GoalHandleFib = rclcpp_action::ClientGoalHandle<FibAction>;

  explicit FibActionClient(const rclcpp::NodeOptions & node_options = rclcpp::NodeOptions());

  // used in the main to stop the client when the goal is done.
  bool is_goal_done() const;

  void send_goal();

private:
  rclcpp_action::Client<FibAction>::SharedPtr client_ptr_;
  rclcpp::TimerBase::SharedPtr timer_;
  bool goal_done_;

  void goal_response_callback(std::shared_future<GoalHandleFib::SharedPtr> future);

  void feedback_callback(
    GoalHandleFib::SharedPtr,
    const std::shared_ptr<const FibAction::Feedback> feedback);

  void result_callback(const GoalHandleFib::WrappedResult & result);

}; 

#endif /* FIB_ACTION_CLIENT_HPP */